/* globals numeral */

var $activity = $('#income, #activity');

var $setSalaryButton = $('#set-salary');
var $salaryInput = $('#salary');

$setSalaryButton.on('click', function () {
  var salary = parseInt($salaryInput.val(), 10);
  updateSalary(salary);
  $setSalaryButton.parent().html(['<p>',
                                  '<strong>Annual Salary: </strong>',
                                  '<span class="salary">',
                                  numeral(salary).format('$0,0.00'),
                                  '</span></p>'].join(''));
  $activity.fadeIn();
});

$salaryInput.keyup(function () {
  if ($salaryInput.val().match(/^\d{5,7}$/)) {
    $setSalaryButton.removeClass('deactivated');
  } else {
    $setSalaryButton.addClass('deactivated');
  }
});

var expectedEarnings = 500;
var taxes = 0;
var expenses = 0;

function updateSalary(salary) {
  taxes = calculateTaxes(salary);
  expenses = calculateExpenses(salary) / 2;
  expectedEarnings = ((salary - taxes) / 24) - expenses;
  $(".paycheck-income").text(numeral(salary / 24).format('$0,0.00'));
  $(".estimated-taxes").text(numeral(taxes / 24).format('$0,0.00'));
  $(".projected-expenses").text(numeral(expenses).format('$0,0.00'));
  $(".projected-savings").text(numeral(expectedEarnings).format('$0,0.00'));
}

function calculateTaxes(salary) {
  if (salary < 8925) { return salary * 0.1; }
  if (salary < 36250) { return salary * 0.15; }
  if (salary < 87850) { return salary * 0.23; }
  return salary * 0.30;
}

function calculateExpenses(salary) {
  if (salary < 24999) { return 1200; }
  if (salary < 39999) { return 1600; }
  if (salary < 54999) { return 2000; }
  if (salary < 69999) { return 2400; }
  if (salary < 84999) { return 2600; }
  if (salary < 99999) { return 3000; }
  if (salary < 119999) { return 3400; }
  return 3800;
}


/* globals addMisfortune */

$(document).ready(function () {

  var $wheelElement = $('#wheel-of-mystfortune');
  
  var width = 340;
  var height = width;
  
  $wheelElement.prepend('<canvas width="' + width + '" height="' + height + '"></canvas>');
  
  var colors = ["#74A949", "#B6DDD3", "#5E8AB9", "#E37536",
                "#F8D43A", "#56B9C5", "#99C987", "#FFF5D5",
                "#C43331", "#B6DDD3", "#62BA9D", "#E37536",
                "#56B9C5", "#1DB2D4", "#F8D43A", "#C43331"];

  var startAngle = 0;
  var arc = Math.PI / 8;
  var spinTimeout = null;

  var spinAngleStart;

  var spinTime = 0;
  var spinTimeTotal = 0;

  var ctx;

  function draw() {
    drawRouletteWheel();
  }

  function drawRouletteWheel() {
    var canvas = $wheelElement.find('canvas')[0];
    if (canvas.getContext) {
      var outsideRadius = width * 0.4;
      var textRadius = width * 0.32;
      var insideRadius = width / 8;
    
      ctx = canvas.getContext("2d");
      ctx.clearRect(0,0,width,height);
    
      ctx.strokeStyle = "black";
      ctx.lineWidth = 2;
    
      ctx.font = '12px sans-serif';
      
      ctx.imageSmoothingEnabled = true;
    
      for(var i = 0; i < 16; i++) {
        var angle = startAngle + i * arc;
        ctx.fillStyle = colors[i];
      
        ctx.beginPath();
        ctx.arc(width / 2, height / 2, outsideRadius, angle, angle + arc, false);
        ctx.arc(width / 2, height / 2, insideRadius, angle + arc, angle, true);
        ctx.stroke();
        ctx.fill();
      
        ctx.save();
        ctx.fillStyle = "black";
        ctx.translate(width / 2 + Math.cos(angle + arc / 2) * textRadius, height / 2 + Math.sin(angle + arc / 2) * textRadius);
        ctx.rotate(angle + arc / 2 + Math.PI / 2);
        var text = i + 1;
        ctx.fillText(text, -ctx.measureText(text).width / 2, 0);
        ctx.restore();
      } 
    
      //Arrow
      ctx.fillStyle = "black";
      ctx.beginPath();
      ctx.moveTo(width / 2 - 4, height / 2 - (outsideRadius + 5));
      ctx.lineTo(width / 2 + 4, height / 2 - (outsideRadius + 5));
      ctx.lineTo(width / 2 + 4, height / 2 - (outsideRadius - 5));
      ctx.lineTo(width / 2 + 9, height / 2 - (outsideRadius - 5));
      ctx.lineTo(width / 2 + 0, height / 2 - (outsideRadius - 13));
      ctx.lineTo(width / 2 - 9, height / 2 - (outsideRadius - 5));
      ctx.lineTo(width / 2 - 4, height / 2 - (outsideRadius - 5));
      ctx.lineTo(width / 2 - 4, height / 2 - (outsideRadius + 5));
      ctx.fill();
    }
  }

  function spin() {
    spinAngleStart = Math.random() * 10 + 10;
    spinTime = 0;
    spinTimeTotal = Math.random() * 3 + 4 * 1000;
    rotateWheel();
  }

  function rotateWheel() {
    spinTime += Math.random() * 60;
    if(spinTime >= spinTimeTotal) {
      stopRotateWheel();
      return;
    }
    var spinAngle = spinAngleStart - easeOut(spinTime, 0, spinAngleStart, spinTimeTotal);
    startAngle += (spinAngle * Math.PI / 180);
    drawRouletteWheel();
    spinTimeout = setTimeout(function () {
      rotateWheel();
    }, 30);
  }

  function stopRotateWheel() {
    clearTimeout(spinTimeout);
    var degrees = startAngle * 180 / Math.PI + 90;
    var arcd = arc * 180 / Math.PI;
    var misfortune = Math.floor((360 - degrees % 360) / arcd);
    ctx.save();
    ctx.font = 'bold 30px sans-serif';
    Misfortunes.addEvent(misfortune);
    ctx.fillText(misfortune + 1, width / 2 - ctx.measureText(misfortune + 1).width / 2, width / 2 + 10);
    ctx.restore();
  }

  function easeOut(t, b, c, d) {
    var ts = (t/=d)*t;
    var tc = ts*t;
    return b+c*(tc + -3*ts + 3*t);
  }

  draw();
  
  $('#spin-button').on('click', function () {
    spin();
  });
  
});

var $ledger = $('.ledger');
var $misfortunes = $('#misfortunes').hide();
var $showMisfortunesButton = $('#show-misfortunes').hide();

$showMisfortunesButton.on('click', function () {
  $misfortunes.toggle();
});

var Paycheck = Backbone.Model.extend({
  initialize: function () {
    this.set('expectedEarnings', expectedEarnings);
  },

  actualEarnings: function () {
    return this.get('expectedEarnings') + this.get('misfortune').amount;
  },

  toJSON: function () {
    return {
      expectedEarnings: this.get('expectedEarnings'),
      misfortune: this.get('misfortune').amount,
      actualEarnings: this.actualEarnings()
    };
  },

  toHTML: function () {
    return ['<tr>',
            '<td class="paycheck"></td>',
            '<td>', numeral(this.get('expectedEarnings')).format('$0,0.00'), '</td>',
            '<td>', numeral(this.get('misfortune').amount).format('$0,0.00'), '</td>',
            '<td>', numeral(this.actualEarnings()).format('$0,0.00'), '</td>',
            '<td>', numeral(Paychecks.totalEarnings()).format('$0,0.00'), '</td>',
            '</tr>'
           ].join('');
  }
});

var Paychecks = new Backbone.Collection([], {
  model: Paycheck
});

Paychecks.rebuildLedger = function () {
  $ledger.empty();
  this.models.forEach(function (paycheck) {
    $ledger.append(paycheck.toHTML());
  });
};

Paychecks.totalEarnings = function () {
  return this.models.reduce(function (sum, paycheck) {
    return sum + paycheck.actualEarnings();
  }, 0);
};

Paychecks.on('add', function (paycheck) {
  $ledger.append(paycheck.toHTML());
  chart.addValue(Paychecks.totalEarnings());
  if (currentTurn() >= 24) { $showMisfortunesButton.show(); }
});

function currentTurn() {
  return Paychecks.size() + 1;
}


/* globals Paychecks */

var Misfortunes = new Backbone.Model({
  misfortunes: [
    {
        "amount": -45,
        "message": "You went over you cell phone bill usage and owe an additional $45.00."
    },
    {
        "amount": -600,
        "message": "You have to repair your car. You owe $600.00."
    },
    {
        "amount": 40,
        "message": "You get a scratch off lottery ticket and win $40.00."
    },
    {
        "amount": -60,
        "message": "You failed to stop at a stop sign and got a ticket. You owe $60.00"
    },
    {
        "amount": -200,
        "message": "You and a friend go out to dinner three times this month. You owe $200.00"
    },
    {
        "amount": -250,
        "message": "You have birthday parties to attend it costs you $250."
    },
    {
        "amount": 0,
        "message": "You decide this month you are going to be thrifty and spend no extra money."
    },
    {
        "amount": -80,
        "message": "You decide you want to go to a Katy Perry concert. It cost you $80.00."
    },
    {
        "amount": -175,
        "message": "You need to upgrade your wardrobe for work. It costs you $175.00."
    },
    {
        "amount": -150,
        "message": "You decide you want to join the gym for the year. You pay the total for the year. It costs you $150.00."
    },
    {
        "amount": 75,
        "message": "You decide that you are going to clip coupons and save $75.00 on your groceries."
    },
    {
        "amount": -175,
        "message": "You get a cavity and your insurance doesn't cover all of the cost.  You have to pay the deductible of $175.00."
    },
    {
        "amount": 50,
        "message": "You saved money on your electric bill by not keeping lights on, using large appliances when it was not a peak time, keeping your heat or AC low, and unplugging you electronics when you leave your house. You saved $50.00 on your bill."
    },
    {
        "amount": -180,
        "message": "You go out with friends which costs you $180.00."
    },
    {
        "amount": -50,
        "message": "It is a very hot/cold month.  Your electric bill is $50.00 more this month."
    },
    {
        "amount": -150,
        "message": "You go to a wedding and it costs you $150.00."
    }
  ]
});

Misfortunes.addEvent = function (misfortune) {
  Paychecks.add({misfortune: this.get('misfortunes')[misfortune]});
  $('.misfortune-message').text(this.get('misfortunes')[misfortune].message);
};

/* globals d3 */

function Chart(selector, width, height) {
  this.svg = d3.select(selector).append('svg').attr('width', width).attr('height', height);

  this.width = width;
  this.height = height;

  this.padding = 40;

  this.data = [0];

  this.xWidth = this.data.length - 1;
  this.yHeight = d3.max(this.data);

  this.xScale = d3.scale.linear()
     .domain([0, this.xWidth])
     .range([this.padding, this.width - this.padding]);

  this.yScale = d3.scale.linear()
     .domain([0, this.yHeight])
     .range([this.height - this.padding, this.padding]);

  this.xAxis = d3.svg.axis()
      .scale(this.xScale)
      .orient("bottom");

  this.yAxis = d3.svg.axis()
      .scale(this.yScale)
      .orient("left")
      .tickFormat(function(d) { return "$" + d; });

  this.xAxisChart = this.svg.append("g")
      .attr("class", "axis")
      .attr("transform", "translate(0," + (this.height - this.padding) + ")")
      .call(this.xAxis);

  this.yAxisChart = this.svg.append("g")
      .attr("class", "axis")
      .attr("transform", "translate(" + this.padding + ",0)")
      .call(this.yAxis);

  this.lineOfBestFit = this.svg.append('line')
      .attr('x1', this.padding)
      .attr('y1', this.height - this.padding)
      .attr('x2', this.width - this.padding)
      .attr('y2', this.padding)
      .attr('stroke-width', 2)
      .attr('stroke', '#FFF5D5');

  this.line = d3.svg.line()
      .x(function(d, i) { return this.xScale(i); }.bind(this))
      .y(function(d) { return this.yScale(d); }.bind(this))
      .interpolate('linear');

  this.path = this.svg.append('svg:path')
     .attr('d', this.line(this.data))
     .attr("stroke", "#99C987")
     .attr('stroke-width', 2)
     .attr('fill', 'none');

  this.svg.append("text")
      .attr("x", this.width - this.padding * 2.2)
      .attr("y", this.height - this.padding * 1.1)
      .text("Paychecks");
}

Chart.prototype.addValue = function (value) {
  this.data.push(value);
  this.updateChart();
};

Chart.prototype.updateChart = function () {
  var duration = 500;

  this.xWidth = this.data.length - 1;
  this.yHeight = d3.max(this.data);

  this.xScale.domain([0, this.xWidth]);
  this.yScale.domain([0, this.yHeight]);

  this.xAxisChart.transition().duration(duration).call(this.xAxis);
  this.yAxisChart.transition().duration(duration).call(this.yAxis);

  this.path.transition().duration(duration).attr('d', this.line(this.data));
};

var chart = new Chart('#chart', 580, 480);

