var yourMisfortunes = [];
var $misfortunesElement = $('#misfortunes');

function addMisfortune(misfortune) {
  yourMisfortunes.push(misfortune);
  $misfortunesElement.append('<p>' + misfortune + '</p>');
}

/* globals addMisfortune */

$(document).ready(function () {

  var $wheelElement = $('#wheel-of-mystfortune');
  
  var width = $wheelElement.width();
  var height = width;
  
  $wheelElement.prepend('<canvas width="' + width + '" height="' + height + '"></canvas>');
  
  var colors = ["#74A949", "#B6DDD3", "#5E8AB9", "#E37536",
                "#F8D43A", "#56B9C5", "#99C987", "#FFF5D5",
                "#C43331", "#B6DDD3", "#62BA9D", "#E37536",
                "#56B9C5", "#1DB2D4", "#F8D43A", "#C43331"];

  var startAngle = 0;
  var arc = Math.PI / 8;
  var spinTimeout = null;

  var spinAngleStart;

  var spinTime = 0;
  var spinTimeTotal = 0;

  var ctx;

  function draw() {
    drawRouletteWheel();
  }

  function drawRouletteWheel() {
    var canvas = $wheelElement.find('canvas')[0];
    if (canvas.getContext) {
      var outsideRadius = width * 0.4;
      var textRadius = width * 0.32;
      var insideRadius = width / 8;
    
      ctx = canvas.getContext("2d");
      ctx.clearRect(0,0,width,height);
    
      ctx.strokeStyle = "black";
      ctx.lineWidth = 2;
    
      ctx.font = '12px sans-serif';
      
      ctx.imageSmoothingEnabled = true;
    
      for(var i = 0; i < 16; i++) {
        var angle = startAngle + i * arc;
        ctx.fillStyle = colors[i];
      
        ctx.beginPath();
        ctx.arc(width / 2, height / 2, outsideRadius, angle, angle + arc, false);
        ctx.arc(width / 2, height / 2, insideRadius, angle + arc, angle, true);
        ctx.stroke();
        ctx.fill();
      
        ctx.save();
        ctx.fillStyle = "black";
        ctx.translate(width / 2 + Math.cos(angle + arc / 2) * textRadius, height / 2 + Math.sin(angle + arc / 2) * textRadius);
        ctx.rotate(angle + arc / 2 + Math.PI / 2);
        var text = i + 1;
        ctx.fillText(text, -ctx.measureText(text).width / 2, 0);
        ctx.restore();
      } 
    
      //Arrow
      ctx.fillStyle = "black";
      ctx.beginPath();
      ctx.moveTo(width / 2 - 4, height / 2 - (outsideRadius + 5));
      ctx.lineTo(width / 2 + 4, height / 2 - (outsideRadius + 5));
      ctx.lineTo(width / 2 + 4, height / 2 - (outsideRadius - 5));
      ctx.lineTo(width / 2 + 9, height / 2 - (outsideRadius - 5));
      ctx.lineTo(width / 2 + 0, height / 2 - (outsideRadius - 13));
      ctx.lineTo(width / 2 - 9, height / 2 - (outsideRadius - 5));
      ctx.lineTo(width / 2 - 4, height / 2 - (outsideRadius - 5));
      ctx.lineTo(width / 2 - 4, height / 2 - (outsideRadius + 5));
      ctx.fill();
    }
  }

  function spin() {
    spinAngleStart = Math.random() * 10 + 10;
    spinTime = 0;
    spinTimeTotal = Math.random() * 3 + 4 * 1000;
    rotateWheel();
  }

  function rotateWheel() {
    spinTime += Math.random() * 60;
    if(spinTime >= spinTimeTotal) {
      stopRotateWheel();
      return;
    }
    var spinAngle = spinAngleStart - easeOut(spinTime, 0, spinAngleStart, spinTimeTotal);
    startAngle += (spinAngle * Math.PI / 180);
    drawRouletteWheel();
    spinTimeout = setTimeout(function () {
      rotateWheel();
    }, 30);
  }

  function stopRotateWheel() {
    clearTimeout(spinTimeout);
    var degrees = startAngle * 180 / Math.PI + 90;
    var arcd = arc * 180 / Math.PI;
    var misfortune = Math.floor((360 - degrees % 360) / arcd);
    ctx.save();
    ctx.font = 'bold 30px sans-serif';
    Misfortunes.addEvent(misfortune);
    ctx.fillText(misfortune + 1, width / 2 - ctx.measureText(misfortune + 1).width / 2, width / 2 + 10);
    ctx.restore();
  }

  function easeOut(t, b, c, d) {
    var ts = (t/=d)*t;
    var tc = ts*t;
    return b+c*(tc + -3*ts + 3*t);
  }

  draw();
  
  $('#spin-button').on('click', function () {
    spin();
  });
  
});

var $ledger = $('.ledger');

var Paycheck = Backbone.Model.extend({
  initialize: function () {
    this.set('expectedEarnings', 600);
  },
  
  actualEarnings: function () {
    return this.get('expectedEarnings') + this.get('misfortune').amount;
  },
  
  toJSON: function () {
    return {
      expectedEarnings: this.get('expectedEarnings'),
      misfortune: this.get('misfortune').amount,
      actualEarnings: this.actualEarnings()
    }
  },
  
  toHTML: function () {
    return ['<tr>',
            '<td class="paycheck"></td>',
            '<td>', numeral(this.get('expectedEarnings')).format('$0,0.00'), '</td>',
            '<td>', numeral(this.get('misfortune').amount).format('$0,0.00'), '</td>',
            '<td>', numeral(this.actualEarnings()).format('$0,0.00'), '</td>',
            '</tr>'
           ].join('');
  }
});

var Paychecks = new Backbone.Collection([], {
  model: Paycheck
});

Paychecks.rebuildLedger = function () {
  $ledger.empty();
  this.models.forEach(function (paycheck) {
    $ledger.append(paycheck.toHTML());
  })
};

Paychecks.chartData = function () {
  var data = [ { x: 0, y: 0 } ];
  this.models.forEach(function (paycheck, index) {
    var datum = paycheck.actualEarnings() + data.slice(-1)[0].y;
    data.push({ x: index + 1, y: datum });
  });
  return data;
};

Paychecks.on('add', function (paycheck) {
  $ledger.append(paycheck.toHTML());
  graph.series[0].data = this.chartData();
  graph.update();
});

var Misfortunes = new Backbone.Model({
  misfortunes: [
    {
        "amount": -45,
        "message": "You went over you cell phone bill usage and owe an additional $45.00."
    },
    {
        "amount": -600,
        "message": "You have to repair your car. You owe $600.00."
    },
    {
        "amount": 40,
        "message": "You get a scratch off lottery ticket and win $40.00."
    },
    {
        "amount": -60,
        "message": "You failed to stop at a stop sign and got a ticket. You owe $60.00"
    },
    {
        "amount": -200,
        "message": "You and a friend go out to dinner three times this month. You owe $200.00"
    },
    {
        "amount": -250,
        "message": "You have birthday parties to attend it costs you $250."
    },
    {
        "amount": 0,
        "message": "You decide this month you are going to be thrifty and spend no extra money."
    },
    {
        "amount": -80,
        "message": "You decide you want to go to a Katy Perry concert. It cost you $80.00."
    },
    {
        "amount": -175,
        "message": "You need to upgrade your wardrobe for work. It costs you $175.00."
    },
    {
        "amount": -150,
        "message": "You decide you want to join the gym for the year. You pay the total for the year. It costs you $150.00."
    },
    {
        "amount": 75,
        "message": "You decide that you are going to clip coupons and save $75.00 on your groceries."
    },
    {
        "amount": -175,
        "message": "You get a cavity and your insurance doesn't cover all of the cost.  You have to pay the deductible of $175.00."
    },
    {
        "amount": 50,
        "message": "You saved money on your electric bill by not keeping lights on, using large appliances when it was not a peak time, keeping your heat or AC low, and unplugging you electronics when you leave your house. You saved $50.00 on your bill."
    },
    {
        "amount": -180,
        "message": "You go out with friends which costs you $180.00."
    },
    {
        "amount": -50,
        "message": "It is a very hot/cold month.  Your electric bill is $50.00 more this month."
    },
    {
        "amount": -150,
        "message": "You go to a wedding and it costs you $150.00."
    }
  ]
});

Misfortunes.addEvent = function (misfortune) {
  Paychecks.add({misfortune: this.get('misfortunes')[misfortune]});
  $('.misfortune-message').text(this.get('misfortunes')[misfortune].message);
};

var graph = new Rickshaw.Graph({
  element: document.querySelector("#chart"),
  renderer: 'line',
  preserve: true,
  height: "200",
  series: [{
    data: Paychecks.chartData(),
    color: 'steelblue'
  }]
});
 
graph.render();

